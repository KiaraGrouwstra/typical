

  array
    Vector
      ✓ the<{ 0: number, 1: number, 2: number, length: 3 }, Vector<number, 3>>()
      ✓ the<Vector<number | string, 3>, { 0: number, 1: number, 2: number, length: 3 } | { 0: string, 1: string, 2: string, length: 3 }>()
      ✓ the<{ 0: number | string, 1: number | string, 2: number | string, length: 3 }, Vector<number | string, 3>>()
      ✓ the<{ 0: number, 1: number, length: 2 } | { 0: number, 1: number, 2: number, length: 3 }, Vector<number, 2 | 3>>()
    ArrayProp
      ✓ the<0, ArrayProp<Array<0>>>()
      ✓ the<0 | 1, ArrayProp<Array<0 | 1>>>()
      ✓ the<0 | 1, ArrayProp<Array<0> | Array<1>>>()
    TupleProp
      ✓ the<0, TupleProp<[0], 0>>()
      ✓ the<0, TupleProp<[0], 1>>()
      × the<any, TupleProp<[], 0>>()
      ✓ the<number, TupleProp<number[], 0>>()
    TupleHasIndex
      ✓ the<'1', TupleHasIndex<NumArr, 1>>()
      ✓ the<'0', TupleHasIndex<NumArr, -1>>()
      ✓ the<'0'|'1', TupleHasIndex<NumArr, -1|1>>()
      ✓ the<'0'|'1', TupleHasIndex<NumArr | ['a'], 1>>()
      ✓ the<'1', TupleHasIndex<{a:1}, 'a'>>()
      ✓ the<'0', TupleHasIndex<{a:1}, 'b'>>()
      ✓ the<'1', TupleHasIndex<{ 1: "hi" }, 1>>()
      ✓ the<'0', TupleHasIndex<{ 1: "hi" }, -1>>()
    IsArrayType
      ✓ the<'1', IsArrayType<NumArr>>()
      ✓ the<'1', IsArrayType<any[]>>()
      ✓ the<'1', IsArrayType<{ length: 2 }>>()
    AppendNumObj
      ✓ the<{ 0: 'a', 1: 'b', 2: 'c' }, AppendNumObj<{ 0: 'a', 1: 'b' }, 'c'>>()
    Length
      ✓ the<3, Length<TupleToObject<TestArr>>>()
      ✓ the<3, Length<TestArr>>()
      ✓ the<0, Length<any[]>>()
      ✓ the<2, Length<{ 0: 'a', 1: 'b' }>>()
      ✓ the<0|3, Length<any[]|TestArr>>()
    ListFrom
      ✓ the<{ 0: 'c', 1: 'd', length: 2 }, ListFrom<{ 0: 'a', 1: 'b', 2: 'c', 3: 'd', length: 4 }, 2>>()
    ListTo
      × the<{ 0: 'a', 1: 'b', length: 2 }, ListTo<{ 0: 'a', 1: 'b', 2: 'c', 3: 'd', length: 4 }, 2>>()
    Reverse
      ✓ the<{ 0: 'b', 1: 'a', length: 2 }, Reverse<['a', 'b']>>()
    TupleLastElem
      ✓ the<'c', TupleLastElem<TestArr>>()
    TupleLastIndex
      ✓ the<2, TupleLastIndex<TestArr>>()
      ✓ the<-1, TupleLastIndex<any[]>>()
    FirstElem
      ✓ the<'a', FirstElem<TestArr>>()
    TupleFirstIndex
      × the<0, TupleFirstIndex<TestArr>>()

  boolean
    Not
      ✓ Not<'0'> -> '1'
      ✓ Not<'1'> -> '0'
      × Not<'2'> -> Bool
      - Not<'true'> -> '0'
      - Not<'false'> -> '1'
      × Not<any> -> never
      ✓ Not<never> -> Bool
      × Not<true> -> '0'
      × Not<false> -> '1'
    And
      ✓ And<'1', '1'> -> '1'
      ✓ And<'0', '1'> -> '0'
    Or
      ✓ Or<'1', '0'> -> '1'
      ✓ Or<'0', '0'> -> '0'
    UnionHasKey
      ✓ UnionHasKey<Bool,'0'> -> '1'
      ✓ UnionHasKey<Bool,'1'> -> '1'
      ✓ UnionHasKey<Bool,'0'> | UnionHasKey<Bool,'1'> -> '1'
      ✓ And<UnionHasKey<Bool,'0'>, UnionHasKey<Bool,'1'>> -> '1'
    Indeterminate
      ✓ Indeterminate<Bool> -> '1'
      ✓ Indeterminate<'0'> -> '0'
      ✓ Indeterminate<'1'> -> '0'
    Determinate
      ✓ Determinate<Bool> -> '0'
      ✓ Determinate<'0'> -> '1'
      ✓ Determinate<'1'> -> '1'
    DefinitelyYes
      ✓ DefinitelyYes<Bool> -> '0'
      ✓ DefinitelyYes<'0'> -> '0'
      ✓ DefinitelyYes<'1'> -> '1'
    DefinitelyNo
      ✓ DefinitelyNo<Bool> -> '0'
      ✓ DefinitelyNo<'0'> -> '1'
      ✓ DefinitelyNo<'1'> -> '0'

  cast
    NumberToString
      ✓ the<'3', NumberToString[3]>()
      ✓ the<'3', NumberToString['3']>()
      ✓ the<'3', NumberToString<3>>()
      ✓ the<string, NumberToString[number]>()
    StringToNumber
      ✓ the<3, StringToNumber['3']>()
      ✓ the<3, StringToNumber[3]>()
      ✓ the<number, StringToNumber[string]>()
    TupleToUnion
      ✓ the<"a" | "b" | "c", TupleToUnion<TestArr>>()
    TupleIndicesToUnion
      ✓ the<0 | 1 | 2, TupleIndicesToUnion<TestArr>>()
    TupleToObject
      ✓ the<{ 0: "a"; 1: "b"; 2: "c"; }, TupleToObject<TestArr>>()
    TupleToList
      ✓ the<{ 0: "a"; 1: "b"; 2: "c"; length: 3; }, TupleToList<TestArr>>()
    NumObjToList
      ✓ the<{ 0: 'a', 1: 'b', length: 2 }, NumObjToList<{ 0: 'a', 1: 'b' }>>()
      ✓ the<{ 0: 'a', 1: 'b', 2: 'c', length: 3 }, NumObjToList<TupleToObject<TestArr>>>()
    ListToNumObj
      ✓ the<{ 0: 'a', 1: 'b' }, ListToNumObj<{ 0: 'a', 1: 'b', length: 2 }>>()

  comp
    StringsEqual
      ✓ the<'1', StringsEqual<'a', 'a'>>()
      ✓ the<'0', StringsEqual<'a', 'b'>>()
    NumbersEqual
      ✓ the<'1', NumbersEqual<123, 123>>()
      ✓ the<'0', NumbersEqual<123, 456>>()
      ✓ the<'1', NumbersEqual<123, '123'>>()
      ✓ the<'1', NumbersEqual<'123', 123>>()
      ✓ the<'0', NumbersEqual<0, 5>>()
      ✓ the<'0', NumbersEqual<5, 0>>()
    Gt
      ✓ the<'1', Gt<3, 2>>()
      ✓ the<'0', Gt<2, 3>>()
      ✓ the<'0', Gt<3, 3>>()
    Lt
      ✓ the<'0', Lt<3, 2>>()
      ✓ the<'1', Lt<2, 3>>()
      ✓ the<'0', Lt<3, 3>>()
    Gte
      ✓ the<'1', Gte<3, 2>>()
      ✓ the<'0', Gte<2, 3>>()
      ✓ the<'1', Gte<3, 3>>()
    Lte
      ✓ the<'0', Lte<3, 2>>()
      ✓ the<'1', Lte<2, 3>>()
      ✓ the<'1', Lte<3, 3>>()
    Max
      ✓ the<6, Max<3, 6>>()
      ✓ the<5, Max<5, 2>>()
    Min
      ✓ the<3, Min<3, 6>>()
      ✓ the<2, Min<5, 2>>()

  function
    Fn
      ✓ the<(v: number) => string, Fn<[number], string>>()

  list
    AppendList
      ✓ the<{ 0: 'a', 1: 'b', 2: 'c', length: 3 }, AppendList<{ 0: 'a', 1: 'b', length: 2 }, 'c'>>()
    LengthList
      ✓ the<2, LengthList<{ 0: 'a', 1: 'b', length: 2 }>>()
    ReverseList
      × the<{ 0: 'b', 1: 'a', length: 2 }, ReverseList<['a', 'b']>>()
    FirstIndex
      ✓ the<2, FirstIndex<{ 2: 'a', 3: 'b' }>>()
    DecIndex
      × the<{ 0: 'a', 1: 'b', length: 2 }, DecIndex<{ 2: 'a', 3: 'b', length: 2 }, 2>>()
    ZeroIndex
      × the<{ 0: 'a', 1: 'b', length: 2 }, ZeroIndex<{ 2: 'a', 3: 'b', length: 2 }>>()
    ListTail
      ✓ the<'c', ListTail<{ 0: 'a', 1: 'b', 2: 'c', length: 3 }>>()
    DifferenceLists
      ✓ the<{ 0: 'c', 1: 'd', length: 2 }, DifferenceLists<{ 0: 'a', 1: 'b', 2: 'c', 3: 'd', length: 4 }, { 0: 123, 1: 456, length: 2 }>>()

  number
    Inc
      ✓ the<2, Inc[1]>()
    Dec
      ✓ the<1, Dec[2]>()
    Add
      ✓ the<5, Add<3, 2>>()
    Subtract
      ✓ the<1, Subtract<3, 2>>()
    Mult
      ✓ the<6, Mult<3, 2>>()
    Pow
      ✓ the<9, Pow<3, 2>>()
      ✓ the<8, Pow<2, 3>>()
    DivFloor
      ✓ the<2, DivFloor<5, 2>>()
    Modulo
      ✓ the<1, Modulo<5, 2>>()

  object
    Keyed
      ✓ the<{a:'a',b:'b'}, Keyed<{a:1,b:2}>>()
    KeyedSafe
      ✓ the<{a:'a',b:'b'} & Obj<never>, KeyedSafe<{a:1} & {b:2}>>()
    ObjectHasKey
      ✓ the<'1', ObjectHasKey<{a:1}, 'a'>>()
      ✓ the<'0', ObjectHasKey<{a:1}, 'b'>>()
      ✓ the<'0'|'1', ObjectHasKey<{a?:1}, 'a'>>()
      ✓ the<'1', ObjectHasKey<NumArr, 1>>()
      ✓ the<'0', ObjectHasKey<NumArr, -1>>()
    HasKey
      ✓ the<'0', HasKey<any[], 2>>()
      × the<'1', HasKey<NumArr, 2>>()
      ✓ the<'0', HasKey<NumArr, 5>>()
      × the<'1', HasKey<{ a: 1 }, 'a'>>()
      ✓ the<'0', HasKey<{ a: 1 }, 'b'>>()
    ObjectHasKeySafe
      ✓ the<'1', ObjectHasKeySafe<{ a: 1 }, 'a'>>()
      ✓ the<'0', ObjectHasKeySafe<{ a: 1 }, 'b'>>()
      ✓ the<'1', ObjectHasKeySafe<{ a: 1 }, 'a' | 'b'>>()
      ✓ the<'1', ObjectHasKeySafe<{ a: 1, toString(): string }, 'a'>>()
      × the<'0', ObjectHasKeySafe<{ a: 1, toString(): string }, 'b'>>()
      ✓ the<'1', ObjectHasKeySafe<{ a: 1, toString(): string }, 'a' | 'b'>>()
      ✓ the<'0', ObjectHasKeySafe<{ a: 1 }, 'toString'>>()
      ✓ the<'1', ObjectHasKeySafe<{ a: 1 }, 'toString' | 'a'>>()
      ✓ the<'0', ObjectHasKeySafe<{ a: 1 }, 'toString' | 'b'>>()
      ✓ the<'1', ObjectHasKeySafe<{ a: 1 }, 'toString' | 'a' | 'b'>>()
      ✓ the<'1', ObjectHasKeySafe<{ a: 1, toString(): string }, 'toString'>>()
      ✓ the<'1', ObjectHasKeySafe<{ a: 1, toString(): string }, 'toString' | 'a'>>()
      ✓ the<'1', ObjectHasKeySafe<{ a: 1, toString(): string }, 'toString' | 'b'>>()
      ✓ the<'1', ObjectHasKeySafe<{ a: 1, toString(): string }, 'toString' | 'a' | 'b'>>()
    ObjectProp
      ✓ the<1, ObjectProp<{ a: 1 }, 'a'>>()
      × the<never, ObjectProp<{ a: 1 }, 'b'>>()
      × the<never, ObjectProp<{ a: 1 }, 'toString'>>()
      ✓ the<1, ObjectProp<{ a: 1, toString(): string }, 'a'>>()
      × the<never, ObjectProp<{ a: 1, toString(): string }, 'b'>>()
      ✓ the<() => string, ObjectProp<{ a: 1, toString(): string }, 'toString'>>()
    Omit
      ✓ the<{ b: number, c: boolean }, Omit<Item1, "a">>()
      ✓ the<'b'|'c'|'toString', Diff<keyof ItemA, "a">>()
      ✓ the<{ b: number, c: boolean, toString(): string }, Omit<ItemA, "a">>()
    Overwrite
      ✓ the<{ a: number, b: number, c: boolean }, Overwrite<Item1, Item2>>()
    IntersectionObjectKeys
      ✓ the<'b', IntersectionObjectKeys<Obj1, Obj2>>()
    IntersectionObjects
      ✓ the<{ b: 2 }, IntersectionObjects<Obj1, Obj2>>()
      ✓ the<{ b: 'X' }, IntersectionObjects<Obj2, Obj1>>()
    ObjectValsToUnion
      ✓ the<1|2, ObjectValsToUnion<Obj1>>()
    Simplify
      ✓ the<{ a: 1, b: 2}, Simplify<{ a: 1 } & { b: 2}>>()
    Swap
      ✓ the<{ b: 'a', d: 'c' }, Swap<{ a: 'b', c: 'd' }>>()
    toString experimenting
      ✓ the<{ a: 1, foo: () => string, toString: () => string }, Omit<abc, "b">>()
      ✓ the<{ a: 1, b: 2, foo: () => string }, Omit<abc, "toString">>()
      ✓ the<abc, Simplify<abc & { "b": never }>>()
      ✓ the<{ a: 1, b: any, foo: () => string, toString: () => string }, Simplify<abc & { "b": any }>>()
      ✓ the<abc, Simplify<abc & { "toString": never }>>()
      ✓ the<{ a: 1, b: 2, foo: () => string, toString: any }, Simplify<abc & { "toString": any }>>()
      ✓ the<abc, Simplify<abc & { "foo": never }>>()
      ✓ the<{ a: 1, b: 2, foo: any, toString: () => string }, Simplify<abc & { "foo": any }>>()
      ✓ the<{ a: 1, b: never, foo: () => string, toString: () => string }, Overwrite<abc, { "b": never }>>()
      ✓ the<{ a: 1, b: any, foo: () => string, toString: () => string }, Overwrite<abc, { "b": any }>>()
      ✓ the<{ a: 1, b: 2, foo: () => string }, Overwrite<abc, { "toString": never }>>()
      ✓ the<{ a: 1, b: 2, foo: () => string, toString: any }, Overwrite<abc, { "toString": any }>>()
      ✓ the<{ a: 1, b: 2, foo: never, toString: () => string }, Overwrite<abc, { "foo": never }>>()
      ✓ the<{ a: 1, b: 2, foo: any, toString: () => string }, Overwrite<abc, { "foo": any }>>()
      ✓ the<abc, Simplify<abc & { "toString": never }>>()
      ✓ the<'1', ObjectHasStringIndex<{ [k: string]: 123 }>>()
      ✓ the<'0', ObjectHasStringIndex<{ a: 123 }>>()

  repros
    × 16018
    ✓ 17908

  type
    ✓ compiles

  util
    UnionHasKey
      ✓ the<'1', UnionHasKey<'a'|'b', 'b'>>()
      ✓ the<'0', UnionHasKey<'a'|'b', 'c'>>()
      ✓ the<'1', UnionHasKey<'a'|'b', 'a'|'b'>>()
      ✓ the<'0', UnionHasKey<'a'|'b', 'c'|'d'>>()
      ✓ the<'0'|'1', UnionHasKey<'a'|'b', 'b'|'c'>>()
      ✓ the<'1', UnionHasKey<'a'|'b'|'toString', 'toString'>>()
      × the<'0', UnionHasKey<'a'|'b', 'toString'>>()
    UnionToObject
      ✓ the<{ b: 'b', c: 'c' }, UnionToObject<'b' | 'c'>>()
    IntersectionUnions
      ✓ the<2|3, IntersectionUnions<1|2|3, 2|3|4>>()
      ✓ the<'b'|'c', IntersectionUnions<'a' | 'b' | 'c', 'b' | 'c' | 'd'>>()
      ✓ the<never, IntersectionUnions<'a' | 'b' | 'c', 'x' | 'z' | 'd'>>()
    UnionContained
      ✓ the<'1', UnionContained<never, 'a'>>()
      ✓ the<'1', UnionContained<'a', 'a'>>()
      ✓ the<'0', UnionContained<'b', 'a'>>()
      ✓ the<'0', UnionContained<'a' | 'b', 'a'>>()
    UnionEmpty
      ✓ the<'1', UnionEmpty<never>>()
      ✓ the<'0', UnionEmpty<'a'>>()
      ✓ the<'0', UnionEmpty<'a' | 'b'>>()
      ✓ the<'0', UnionEmpty<'toString'>>()
      ✓ the<'0', UnionEmpty<'toString' | 'a'>>()
    UnionsOverlap
      ✓ the<'1', UnionsOverlap<'a', 'a' | 'b'>>()
      ✓ the<'0', UnionsOverlap<'a', 'c'>>()
    IsUnion
      × the<'1', IsUnion<'a' | 'b'>>()
      × the<'0', IsUnion<'a'>>()
      ✓ the<'0', IsUnion<never>>()
      × the<'1', IsUnion<'a' | undefined>>()
    Diff
      ✓ the<'a'|'b', Diff<"a" | "b" | "c", "c" | "d">>()
      ✓ the<'b'|'toString', Diff<'a' | 'b' | 'toString', 'a'>>()
      ✓ the<'b', Diff<'a' | 'b', 'a' | 'toString'>>()
    UnionDiff
      ✓ the<'a', UnionDiff<'a' | 'b' | 'c', 'b' | 'c' | 'd'>>()
      ✓ the<'b'|'toString', UnionDiff<'a' | 'b' | 'toString', 'a'>>()
      ✓ the<'b', UnionDiff<'a' | 'b', 'a' | 'toString'>>()
      × the<'0', ObjectHasKey<{ a: 1 }, "toString">>()

  util
    the
      ✓ works with matching types
      ✓ fails with clashing types
      ✓ protects from never when flipped
      × protects from any
    If
      ✓ has then
      ✓ has else
    Intersection
      ✓ intersects


  198 passing (40ms)
  2 pending
  23 failing

  × array TupleProp the<any, TupleProp<[], 0>>():
     Error: A tuple type element list cannot be empty.
  

  × array ListTo the<{ 0: 'a', 1: 'b', length: 2 }, ListTo<{ 0: 'a', 1: 'b', 2: 'c', 3: 'd', length: 4 }, 2>>():
     Error: Type '{ length: 2; }' does not satisfy the constraint '{ 0: "a"; 1: "b"; length: 2; }'.
  

  × array TupleFirstIndex the<0, TupleFirstIndex<TestArr>>():
     Error: Type 'number' does not satisfy the constraint '0'.
  

  × boolean Not Not<'2'> -> Bool:
     Error: Type '"2"' does not satisfy the constraint '"0" | "1"'.
  

  × boolean Not Not<any> -> never:
     Error: Type 'any' does not satisfy the constraint 'never'.
  

  × boolean Not Not<true> -> '0':
     Error: Type 'true' does not satisfy the constraint '"0" | "1"'.
  

  × boolean Not Not<false> -> '1':
     Error: Type 'false' does not satisfy the constraint '"0" | "1"'.
  

  × list ReverseList the<{ 0: 'b', 1: 'a', length: 2 }, ReverseList<['a', 'b']>>():
     Error: Type 'Overwrite<{ length: number; } & { "0": "a" | "b"; } & { "1": "a" | "b"; }, { length: 2; }>' does not satisfy the constraint '{ 0: "b"; 1: "a"; length: 2; }'.
  

  × list DecIndex the<{ 0: 'a', 1: 'b', length: 2 }, DecIndex<{ 2: 'a', 3: 'b', length: 2 }, 2>>():
     Error: Type '{ length: 2; } & { [x: string]: "a"; } & { [x: string]: "b"; }' does not satisfy the constraint '{ 0: "a"; 1: "b"; length: 2; }'.
  

  × list ZeroIndex the<{ 0: 'a', 1: 'b', length: 2 }, ZeroIndex<{ 2: 'a', 3: 'b', length: 2 }>>():
     Error: Type '{ length: 2; } & { [x: string]: "a"; } & { [x: string]: "b"; }' does not satisfy the constraint '{ 0: "a"; 1: "b"; length: 2; }'.
  

  × object HasKey the<'1', HasKey<NumArr, 2>>():
     Error: Type '"0"' does not satisfy the constraint '"1"'.
  

  × object HasKey the<'1', HasKey<{ a: 1 }, 'a'>>():
     Error: Type '"0"' does not satisfy the constraint '"1"'.
  

  × object ObjectHasKeySafe the<'0', ObjectHasKeySafe<{ a: 1, toString(): string }, 'b'>>():
     Error: Type '"1"' does not satisfy the constraint '"0"'.
  

  × object ObjectProp the<never, ObjectProp<{ a: 1 }, 'b'>>():
     Error: Type 'any' does not satisfy the constraint 'never'.
  

  × object ObjectProp the<never, ObjectProp<{ a: 1 }, 'toString'>>():
     Error: Type '() => string' does not satisfy the constraint 'never'.
  

  × object ObjectProp the<never, ObjectProp<{ a: 1, toString(): string }, 'b'>>():
     Error: Type 'any' does not satisfy the constraint 'never'.
  

  × repros 16018:
     Error: Type 'I' does not satisfy the constraint 'string'.
  

  × util UnionHasKey the<'0', UnionHasKey<'a'|'b', 'toString'>>():
     Error: Type '() => string' does not satisfy the constraint '"0"'.
  

  × util IsUnion the<'1', IsUnion<'a' | 'b'>>():
     Error: Type '"0"' does not satisfy the constraint '"1"'.
  

  × util IsUnion the<'0', IsUnion<'a'>>():
     Error: Type '"1"' does not satisfy the constraint '"0"'.
  

  × util IsUnion the<'1', IsUnion<'a' | undefined>>():
     Error: Type '"a" | undefined' does not satisfy the constraint 'string'.
  

  × util UnionDiff the<'0', ObjectHasKey<{ a: 1 }, "toString">>():
     Error: Type '() => string' does not satisfy the constraint '"0"'.
  

  × util the protects from any:
     Error: No matching semantic failures, expected "does not satisfy"!
  



